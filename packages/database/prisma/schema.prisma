generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?           @unique
  emailVerified   Boolean?
  image           String?
  registered_at   DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  deleted_at      DateTime?
  posts           Post[]
  comments        Comment[]
  commentReaction CommentReaction[]
  postReaction    PostReaction[]
}

enum ReactionType {
  LIKE
  DISLIKE
}

model CommentReaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  commentId String       @db.ObjectId
  userId    String       @db.ObjectId
  reaction  ReactionType
  createdAt DateTime     @default(now()) @map(name: "created_at")

  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
  @@index([userId])
  @@map(name: "comment_reactions")
}

model Comment {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  created_at DateTime
  updated_at DateTime?
  deleted_at DateTime?
  post       Post              @relation(fields: [postID], references: [id])
  postID     String            @db.ObjectId
  user       User?             @relation(fields: [userId], references: [id])
  userId     String?           @db.ObjectId
  likes      CommentReaction[]
}

model PostReaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  postId    String       @db.ObjectId
  userId    String       @db.ObjectId
  reaction  ReactionType
  createdAt DateTime     @default(now()) @map(name: "created_at")

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([userId])
  @@map(name: "post_reactions")
}

model Post {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  anonymous    Boolean
  title        String
  content      String
  picture      String?
  picture_desc String?
  status       String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime?
  topic        String?
  author       User           @relation(fields: [userID], references: [id])
  userID       String         @db.ObjectId
  comments     Comment[]
  reactions    PostReaction[]
}
